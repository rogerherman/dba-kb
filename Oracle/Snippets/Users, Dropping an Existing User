-- Drops the specified user from the database.
--    Current Version: v1
--    Documentation:
--        BE CERTAIN that you want to drop the schema and all of its contents!

-- Check to see if there are any dependencies on the schema that will break if the user is dropped.
SELECT * 
  FROM dba_dependencies d
 WHERE d.referenced_owner = '<USERNAME>' 
   AND d.owner != '<USERNAME>'
 ORDER BY d.owner, d.name, d.type;

-- Check which tablespaces are being used by the user. Make note of these.
SELECT DISTINCT s.tablespace_name 
  FROM dba_segments s
 WHERE owner = '<USERNAME>'
 ORDER BY s.tablespace_name;

-- Check if there are any invalid objects in the database.
--    Regardless whether there are or are not, you don't want this list to change after the user has been dropped.
SELECT DISTINCT o.owner, o.object_name, o.object_type
  FROM dba_invalid_objects o
 ORDER BY o.owner, o.object_name, o.object_type;

-- Check to see if the user had granted any privileges (these disappear).
--     If there are any privileges granted by this user, you will need to regrant them as a separate user.
SELECT *
  FROM dba_tab_privs p
 WHERE grantor = '<USERNAME>'
 ORDER BY p.owner, p.table_name, p.privilege, p.grantee;

-- Drop the user
DROP USER <USERNAME> CASCADE;

-- Check to see if the user's tablespaces are now empty.
--     If a tablespace no longer has objects in it, we need to additionally drop them.
SELECT s.owner, s.segment_name 
  FROM dba_segments s
 WHERE s.tablespace_name IN ('<list of tablespace names>')
 ORDER BY s.owner, s.segment_name;

DROP TABLESPACE <TABLESPACE_NAME> INCLUDING CONTENTS AND DATAFILES;

-- Now that the user has been removed, ensure that there are no additional invalid objects in the database.
--     Instead of duplicating the query here, just rerun the invalid object SQL above.
